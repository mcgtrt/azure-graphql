package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/mcgtrt/azure-graphql/graph/model"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, params model.CreateEmployeeParams) (*model.Response, error) {
	return r.Resolver.store.InsertEmployee(ctx, &params)
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, params model.UpdateEmployeeParams) (*model.Response, error) {
	return r.Resolver.store.UpdateEmployee(ctx, &params)
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (*model.Response, error) {
	return r.Resolver.store.DeleteEmployee(ctx, id)
}

// Employee is the resolver for the employee field.
func (r *queryResolver) Employee(ctx context.Context, id string) (*model.Employee, error) {
	return r.Resolver.store.GetEmployeeByID(ctx, id)
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context, limit *int, page *int, sortBy *string) ([]*model.Employee, error) {
	return r.Resolver.store.GetEmployees(ctx, limit, page, sortBy)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
